// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SoundAtlas.Migrations
{
    [DbContext(typeof(MyMusicAppContext))]
    [Migration("20240505094758_words_column_change")]
    partial class words_column_change
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("SoundAtlas.Models.InstrumentCategoryModel", b =>
                {
                    b.Property<int>("InstrumentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("instrument_categories_id");

                    b.Property<string>("Classification1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("classification1");

                    b.Property<string>("Classification2")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("classification2");

                    b.Property<string>("Classification3")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("classification3");

                    b.Property<string>("Classification4")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("classification4");

                    b.HasKey("InstrumentCategoryId");

                    b.ToTable("instrument_categories");
                });

            modelBuilder.Entity("SoundAtlas.Models.InstrumentModel", b =>
                {
                    b.Property<int>("InstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("instruments_id");

                    b.Property<int>("InstrumentCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("instrument_categories_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("InstrumentId");

                    b.HasIndex("InstrumentCategoryId");

                    b.ToTable("instruments");
                });

            modelBuilder.Entity("SoundAtlas.Models.InstrumentWordLinkageModel", b =>
                {
                    b.Property<int>("InstrumentWordLinkageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("instrument_word_linkages_id ");

                    b.Property<int>("VirtualInstrumentPresetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instrument_presets_id");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("words_id");

                    b.HasKey("InstrumentWordLinkageId");

                    b.HasIndex("VirtualInstrumentPresetId");

                    b.HasIndex("WordId");

                    b.ToTable("instrument_word_linkages");
                });

            modelBuilder.Entity("SoundAtlas.Models.TheoryDetailModel", b =>
                {
                    b.Property<int>("TheoryDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("theory_details_id ");

                    b.Property<string>("Memo")
                        .HasColumnType("TEXT")
                        .HasColumnName("memo");

                    b.Property<int>("TheoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("theories_id");

                    b.HasKey("TheoryDetailId");

                    b.HasIndex("TheoryId");

                    b.ToTable("theory_details");
                });

            modelBuilder.Entity("SoundAtlas.Models.TheoryModel", b =>
                {
                    b.Property<int>("TheoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("theories_id ");

                    b.Property<bool>("ChordFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chrod_flg");

                    b.Property<bool>("MelodyFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("melody_flg");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("RhythmFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rhythm_flg");

                    b.HasKey("TheoryId");

                    b.ToTable("theories");
                });

            modelBuilder.Entity("SoundAtlas.Models.TheoryWordLinkageModel", b =>
                {
                    b.Property<int>("TheoryWordLinkageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("theory_word_linkages_id ");

                    b.Property<int>("TheoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("theories_id");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("words_id");

                    b.HasKey("TheoryWordLinkageId");

                    b.HasIndex("TheoryId");

                    b.HasIndex("WordId");

                    b.ToTable("theory_word_linkages");
                });

            modelBuilder.Entity("SoundAtlas.Models.VirtualInstrumentDetailModel", b =>
                {
                    b.Property<int>("VirtualInstrumentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instrument_details_id");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT")
                        .HasColumnName("image");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_updated");

                    b.Property<string>("Memo")
                        .HasColumnType("TEXT")
                        .HasColumnName("memo");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("site_url");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("version");

                    b.Property<int>("VirtualInstrumentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instruments_id");

                    b.HasKey("VirtualInstrumentDetailId");

                    b.HasIndex("VirtualInstrumentId");

                    b.ToTable("virtual_instrument_details");
                });

            modelBuilder.Entity("SoundAtlas.Models.VirtualInstrumentModel", b =>
                {
                    b.Property<int>("VirtualInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instrument_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("VirtualInstrumentId");

                    b.ToTable("virtual_instruments");
                });

            modelBuilder.Entity("SoundAtlas.Models.VirtualInstrumentParameterModel", b =>
                {
                    b.Property<int>("VirtualInstrumentParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instrument_parameters_id ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.Property<int>("VirtualInstrumentPresetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instrument_presets_id");

                    b.HasKey("VirtualInstrumentParameterId");

                    b.HasIndex("VirtualInstrumentPresetId");

                    b.ToTable("virtual_instrument_parameters");
                });

            modelBuilder.Entity("SoundAtlas.Models.VirtualInstrumentPresetModel", b =>
                {
                    b.Property<int>("VirtualInstrumentPresetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instrument_presets_id");

                    b.Property<bool>("BassFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("bass_flg");

                    b.Property<bool>("ChordFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chord_flg");

                    b.Property<bool>("ChordRhythmFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chrod_rhythm_flg");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("instruments_id");

                    b.Property<bool>("MelodyFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("melody_flg");

                    b.Property<bool>("PercussionFlg")
                        .HasColumnType("INTEGER")
                        .HasColumnName("percussion_flg");

                    b.Property<string>("PresetName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("preset_name");

                    b.Property<int>("Rate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rate");

                    b.Property<int>("VirtualInstrumentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("virtual_instruments_id");

                    b.HasKey("VirtualInstrumentPresetId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("VirtualInstrumentId");

                    b.ToTable("virtual_instrument_presets");
                });

            modelBuilder.Entity("SoundAtlas.Models.WordModel", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("words_id");

                    b.Property<string>("Abstract")
                        .HasColumnType("TEXT")
                        .HasColumnName("abstract");

                    b.Property<string>("Detail")
                        .HasColumnType("TEXT")
                        .HasColumnName("detail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("WordId");

                    b.ToTable("words");
                });

            modelBuilder.Entity("SoundAtlas.Models.InstrumentModel", b =>
                {
                    b.HasOne("SoundAtlas.Models.InstrumentCategoryModel", "InstrumentCategory")
                        .WithMany()
                        .HasForeignKey("InstrumentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstrumentCategory");
                });

            modelBuilder.Entity("SoundAtlas.Models.InstrumentWordLinkageModel", b =>
                {
                    b.HasOne("SoundAtlas.Models.VirtualInstrumentPresetModel", "VirtualInstrumentPreset")
                        .WithMany()
                        .HasForeignKey("VirtualInstrumentPresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundAtlas.Models.WordModel", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualInstrumentPreset");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("SoundAtlas.Models.TheoryDetailModel", b =>
                {
                    b.HasOne("SoundAtlas.Models.TheoryModel", "Theory")
                        .WithMany()
                        .HasForeignKey("TheoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theory");
                });

            modelBuilder.Entity("SoundAtlas.Models.TheoryWordLinkageModel", b =>
                {
                    b.HasOne("SoundAtlas.Models.TheoryModel", "Theory")
                        .WithMany()
                        .HasForeignKey("TheoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundAtlas.Models.WordModel", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theory");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("SoundAtlas.Models.VirtualInstrumentDetailModel", b =>
                {
                    b.HasOne("SoundAtlas.Models.VirtualInstrumentModel", "VirtualInstrument")
                        .WithMany()
                        .HasForeignKey("VirtualInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualInstrument");
                });

            modelBuilder.Entity("SoundAtlas.Models.VirtualInstrumentParameterModel", b =>
                {
                    b.HasOne("SoundAtlas.Models.VirtualInstrumentPresetModel", "VirtualInstrumentPreset")
                        .WithMany()
                        .HasForeignKey("VirtualInstrumentPresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualInstrumentPreset");
                });

            modelBuilder.Entity("SoundAtlas.Models.VirtualInstrumentPresetModel", b =>
                {
                    b.HasOne("SoundAtlas.Models.InstrumentModel", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundAtlas.Models.VirtualInstrumentModel", "VirtualInstrument")
                        .WithMany()
                        .HasForeignKey("VirtualInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("VirtualInstrument");
                });
#pragma warning restore 612, 618
        }
    }
}
